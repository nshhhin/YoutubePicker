//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `APIKey.plist`.
    static let apiKeyPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "APIKey", pathExtension: "plist")
    
    /// `bundle.url(forResource: "APIKey", withExtension: "plist")`
    static func apiKeyPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.apiKeyPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `Pika`.
    static let pika = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pika")
    
    /// `UIImage(named: "Pika", bundle: ..., traitCollection: ...)`
    static func pika(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pika, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `SearchResultCell`.
    static let searchResultCell = _R.nib._SearchResultCell()
    
    /// `UINib(name: "SearchResultCell", in: bundle)`
    static func searchResultCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `PlayYoutube`.
    static let playYoutube = _R.storyboard.playYoutube()
    /// Storyboard `SearchYoutube`.
    static let searchYoutube = _R.storyboard.searchYoutube()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "PlayYoutube", bundle: ...)`
    static func playYoutube(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.playYoutube)
    }
    
    /// `UIStoryboard(name: "SearchYoutube", bundle: ...)`
    static func searchYoutube(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchYoutube)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _SearchResultCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchResultCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchResultCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct playYoutube: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = PlayYoutubeVC
      
      let bundle = R.hostingBundle
      let name = "PlayYoutube"
      
      fileprivate init() {}
    }
    
    struct searchYoutube: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SearchYoutubeVC
      
      let bundle = R.hostingBundle
      let name = "SearchYoutube"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
